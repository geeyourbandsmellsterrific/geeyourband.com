---
import { getCollection } from "astro:content";
import BaseLayout from "src/layouts/BaseLayout.astro";
import CardShow from "@components/CardShow.astro";
import { marked } from "marked";
import { Image } from "astro:assets";

export async function getStaticPaths() {
  const members = await getCollection("member");
  return members.map((member) => ({
    params: { member: member.slug },
    props: { member: member },
  }));
}

const { member } = Astro.props;

const details = await getCollection("details");
const today = new Date();
today.setHours(0, 0, 0, 0);

const shows = (await getCollection("show"))
  .filter((show) => {
    return (
      Array.isArray(show.data.member) &&
      show.data.member
        .map((m) => (typeof m === "string" ? m : m.id))
        .includes(member.slug)
    );
  })
  .filter((show) => {
    // Parse "Sat, Jun 19" as MM-DD of current year
    const [_, monthStr, dayStr] = show.data.startDate.split(" ");
    const month = new Date(`${monthStr} 1, 2000`).getMonth(); // get month index
    const day = parseInt(dayStr, 10);
    const year = new Date().getFullYear();

    // Determine timezone offset in hours
    let tzOffset = 0;
    switch (show.data.timezone) {
      case "EDT":
      case "EST":
        tzOffset = -4; // EDT is UTC-4, EST is UTC-5, but for summer assume -4
        break;
      case "CDT":
      case "CST":
        tzOffset = -5; // CDT is UTC-5, CST is UTC-6, but for summer assume -5
        break;
      case "MDT":
      case "MST":
        tzOffset = -6; // MDT is UTC-6, MST is UTC-7, but for summer assume -6
        break;
      case "PDT":
      case "PST":
        tzOffset = -7; // PDT is UTC-7, PST is UTC-8, but for summer assume -7
        break;
      default:
        tzOffset = 0;
    }

    // Create show date in UTC, then adjust for timezone
    const showDate = new Date(Date.UTC(year, month, day));
    showDate.setUTCHours(0, 0, 0, 0);
    showDate.setUTCHours(showDate.getUTCHours() - tzOffset);

    // Get today's date in UTC for comparison
    const todayUTC = new Date();
    todayUTC.setUTCHours(0, 0, 0, 0);

    return showDate >= todayUTC;
  })
  .sort((a, b) => {
    const [_, amonthStr, adayStr] = a.data.startDate.split(" ");
    const [__, bmonthStr, bdayStr] = b.data.startDate.split(" ");
    const year = new Date().getFullYear();

    let aOffset = 0,
      bOffset = 0;
    switch (a.data.timezone) {
      case "EDT":
      case "EST":
        aOffset = -4;
        break;
      case "CDT":
      case "CST":
        aOffset = -5;
        break;
      case "MDT":
      case "MST":
        aOffset = -6;
        break;
      case "PDT":
      case "PST":
        aOffset = -7;
        break;
      default:
        aOffset = 0;
    }
    switch (b.data.timezone) {
      case "EDT":
      case "EST":
        bOffset = -4;
        break;
      case "CDT":
      case "CST":
        bOffset = -5;
        break;
      case "MDT":
      case "MST":
        bOffset = -6;
        break;
      case "PDT":
      case "PST":
        bOffset = -7;
        break;
      default:
        bOffset = 0;
    }

    const adate = new Date(
      Date.UTC(
        year,
        new Date(`${amonthStr} 1, 2000`).getMonth(),
        parseInt(adayStr, 10),
      ),
    );
    adate.setUTCHours(0, 0, 0, 0);
    adate.setUTCHours(adate.getUTCHours() - aOffset);

    const bdate = new Date(
      Date.UTC(
        year,
        new Date(`${bmonthStr} 1, 2000`).getMonth(),
        parseInt(bdayStr, 10),
      ),
    );
    bdate.setUTCHours(0, 0, 0, 0);
    bdate.setUTCHours(bdate.getUTCHours() - bOffset);

    return adate.getTime() - bdate.getTime();
  });
const content = await marked.parse(
  member.data.bio ? member.data.bio.replace(/\n(?=\n)/g, "\n\n<br/>\n") : "",
);
const bgColors = [
  "bg-amber-400",
  "bg-rose-400",
  "bg-yellow-400",
  "bg-pink-400",
  "bg-sky-600",
  "bg-lime-400",
];
---

<BaseLayout
  title={member.data.name + " - " + member.data.instrument}
  description={member.data.bio
    ? member.data.bio
        .split(" ")
        .slice(0, 20)
        .join(" ")
        .replace(/[#*_\`]/g, "")
        .replace(/\[([^\]]+)\]\([^\)]+\)/g, "$1")
        .trim() + (member.data.bio.split(" ").length > 20 && "...")
    : ""}
>
  <article
    id="member"
    class="flex flex-col items-center gap-8 mx-auto px-3 pt-6 xl:pt-16 pb-32 max-w-[1320px]"
  >
    <section
      id="member-info"
      class="flex md:flex-row flex-col justify-between items-center md:items-stretch gap-12 px-3 w-full"
    >
      <div
        id="member-photo"
        class="relative w-full md:max-w-[700px] aspect-square"
      >
        {
          member.data.photo ? (
            <picture>
              {typeof member.data.photo === "object" ? (
                <Image
                  src={member.data.photo}
                  alt={member.data.name}
                  width={member.data.photo.width}
                  height={member.data.photo.height}
                  loading="eager"
                  class="rounded-lg w-full h-full object-cover"
                  style={
                    member.data.photoColor
                      ? `background-color: ${member.data.photoColor};`
                      : bgColors[member.data.order % bgColors.length]
                  }
                />
              ) : (
                <img
                  src={member.data.photo}
                  alt={member.data.name}
                  width={350}
                  height={350}
                  loading="eager"
                  class="rounded-lg w-full h-full object-cover"
                  style={
                    member.data.photoColor
                      ? `background-color: ${member.data.photoColor};`
                      : bgColors[member.data.order % bgColors.length]
                  }
                />
              )}
            </picture>
          ) : (
            <Image
              src="/assets/svgs/logo.svg"
              alt={details[0].data.name}
              width={350}
              height={350}
              loading="eager"
              class="rounded-lg w-full h-full object-cover"
              style={
                member.data.photoColor
                  ? `background-color: ${member.data.photoColor};`
                  : bgColors[member.data.order % bgColors.length]
              }
            />
          )
        }
      </div>

      <div
        id="member-details"
        class="flex flex-col justify-center items-center md:items-stretch gap-4 w-full align-middle"
      >
        <h1 class="text-pink-400 md:text-left text-center">
          <em class="opacity-60 text-pink-100">
            {member.data.adjective ? member.data.adjective : ""}
          </em>
          <br />
          <strong>{member.data.name}</strong>
        </h1>
        <p class="p-2 text-yellow-200">{member.data.instrument}</p>

        <div id="member-content" class="overflow-auto">
          <p set:html={content} />
        </div>
      </div>
    </section>

    {
      shows.length !== 0 && (
        <section id="member-shows" class="mt-24">
          <div class="flex items-center">
            <div class="flex-1 bg-linear-to-r from-transparent to-purple-500 h-px" />
            <h2 class="flex items-center gap-2 px-4 font-bold text-yellow-300 text-3xl md:text-4xl text-center">
              <span>
                {shows.length > 1 ? "UPCOMING SHOWS" : "UPCOMING SHOW"}
              </span>
            </h2>
            <div class="flex-1 bg-linear-to-l from-transparent to-purple-500 h-px" />
          </div>
          {shows.length >= 1 && (
            <div class="flex flex-col justify-center items-center gap-8 w-full text-center align-middle">
              <div
                id="upcoming-shows-list"
                class="flex flex-col justify-center items-stretch gap-8 px-10 pt-12 pb-4 w-full max-w-[1400px] overflow-hidden text-center"
              >
                {shows.slice(0, 6).map((show, index) => (
                  <CardShow show={show} index={index} />
                ))}
              </div>

              {shows.length > 6 && (
                <div class="mt-2 text-center">
                  <a
                    href="/shows"
                    class="bg-yellow-400/10 hover:bg-yellow-400/30 border-yellow-400 text-yellow-400 button"
                  >
                    View All Shows
                  </a>
                </div>
              )}
            </div>
          )}
        </section>
      )
    }
  </article>
</BaseLayout>
