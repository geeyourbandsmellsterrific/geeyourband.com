---
import { getCollection } from "astro:content";
import BaseLayout from "src/layouts/BaseLayout.astro";
import CardShow from "@components/CardShow.astro";
import { marked } from "marked";
import { Image } from "astro:assets";

const details = await getCollection("details");
const shows = (await getCollection("show"))
  .filter((show) => new Date(show.data.date) >= new Date())
  .sort(
    (a, b) => new Date(a.data.date).valueOf() - new Date(b.data.date).valueOf(),
  );

export async function getStaticPaths() {
  const members = await getCollection("member");
  return members.map((member) => ({
    params: { member: member.slug },
    props: { member: member },
  }));
}

const { member } = Astro.props;
const content = await marked.parse(
  member.data.bio.replace(/\n(?=\n)/g, "\n\n<br/>\n"),
);
const bgColors = [
  "bg-amber-400",
  "bg-rose-400",
  "bg-yellow-400",
  "bg-pink-400",
  "bg-sky-600",
  "bg-lime-400",
];
---

<BaseLayout
  title={member.data.name + " - " + member.data.instrument}
  description={member.data.bio
    .split(" ")
    .slice(0, 20)
    .join(" ")
    .replace(/[#*_\`]/g, "")
    .replace(/\[([^\]]+)\]\([^\)]+\)/g, "$1")
    .trim() + (member.data.bio.split(" ").length > 20 && "...")}
>
  <article
    id="member"
    class="flex flex-col items-center gap-8 mx-auto px-3 pt-6 xl:pt-16 pb-32 max-w-[1320px]"
  >
    <section
      id="member-info"
      class="flex md:flex-row flex-col justify-between items-center md:items-start gap-12 px-3 w-full"
    >
      <div
        id="member-photo"
        class="relative w-full md:max-w-[700px] aspect-square"
      >
        {
          member.data.photo ? (
            <picture>
              {typeof member.data.photo === "object" ? (
                <Image
                  src={member.data.photo}
                  alt={member.data.name}
                  width={member.data.photo.width}
                  height={member.data.photo.height}
                  loading="eager"
                  class={`${bgColors[member.data.order % bgColors.length]} w-full h-full object-cover rounded-lg`}
                />
              ) : (
                <img
                  src={member.data.photo}
                  alt={member.data.name}
                  width={350}
                  height={350}
                  loading="eager"
                  class={`${bgColors[member.data.order % bgColors.length]} w-full h-full object-cover rounded-lg`}
                />
              )}
            </picture>
          ) : (
            <Image
              src="/assets/svgs/logo.svg"
              alt={details[0].data.name}
              width={350}
              height={350}
              loading="eager"
              class="bg-transparent drop-shadow-sm"
            />
          )
        }
      </div>

      <div id="member-details" class="flex flex-col gap-4 w-full">
        <div class="p-4 text-center">
          <h1 class="text-pink-400">
            <em class="opacity-60 px-1 text-pink-100">
              {member.data.adjective ? member.data.adjective : ""}
            </em>
            <br />
            <strong>{member.data.name}</strong>
          </h1>
          <p class="py-2 text-yellow-200">{member.data.instrument}</p>
        </div>

        <div id="member-content" class="overflow-auto">
          <p set:html={content} />
        </div>
      </div>
    </section>

    {
      shows.length !== 0 && (
        <section id="member-shows" class="mt-18">
          <div class="flex items-center mb-8">
            <div class="flex-1 bg-linear-to-r from-transparent to-purple-500 h-px" />
            <h2 class="flex items-center gap-2 px-4 font-bold text-yellow-300 text-3xl md:text-4xl text-center">
              <span>
                {shows.length > 1 ? "UPCOMING SHOWS" : "UPCOMING SHOW"}
              </span>
            </h2>
            <div class="flex-1 bg-linear-to-l from-transparent to-purple-500 h-px" />
          </div>
          {shows.length >= 1 && (
            <div class="flex flex-col justify-center items-center gap-8 w-full text-center align-middle">
              <div
                id="upcoming-shows-list"
                class="flex flex-col justify-center items-stretch gap-16 px-10 py-3 w-full max-w-[1400px] overflow-hidden text-center"
              >
                {shows.map((show, index) => (
                  <CardShow show={show} index={index} />
                ))}
              </div>
            </div>
          )}
        </section>
      )
    }
  </article>
</BaseLayout>
