---
import { getCollection, getEntries } from "astro:content";
import BaseLayout from "src/layouts/BaseLayout.astro";
import CardMemberSmall from "@components/CardMemberSmall.astro";
import { marked } from "marked";
import { Image } from "astro:assets";

export async function getStaticPaths() {
  const shows = await getCollection("show");
  return shows.map((show) => ({
    params: { show: show.slug },
    props: { show: show },
  }));
}

const details = await getCollection("details");
const { show } = Astro.props;
const content = await marked.parse(
  show.body && show.body.trim()
    ? show.body.replace(/\n(?=\n)/g, "\n\n<br/>\n")
    : "",
);

const members = (await getEntries(show.data.member))
  .filter((member) => member.collection === "member")
  .sort((a, b) => (a.data.order ?? 0) - (b.data.order ?? 0));

// Parse date and time strings into ISO format
// Handles formats like "Sat, Jun 12" for date and "9:32pm" or "11:00am" for time
// Returns ISO string in UTC with 'Z' suffix
function parseDateTime(
  dateStr: string,
  timeStr: string,
): Date | string | undefined {
  // Parse date like "Sat, Jun 12"
  const [_, monthStr, dayStr] =
    dateStr?.match(/^[A-Za-z]+,\s([A-Za-z]+)\s(\d{1,2})$/) || [];
  const year = new Date().getFullYear();
  if (!monthStr || !dayStr) return undefined;
  // Parse time like "9:32pm" or "11:00am"
  let hour = 0,
    minute = 0;
  if (timeStr) {
    const timeMatch = timeStr.match(/^(\d{1,2}):(\d{2})(am|pm)$/i);
    if (timeMatch) {
      hour = parseInt(timeMatch[1], 10);
      minute = parseInt(timeMatch[2], 10);
      const amPm = timeMatch[3].toLowerCase();
      if (amPm === "pm" && hour !== 12) hour += 12;
      if (amPm === "am" && hour === 12) hour = 0;
    }
  }
  // Build local date string
  const localDateStr = `${monthStr} ${dayStr}, ${year} ${hour.toString().padStart(2, "0")}:${minute.toString().padStart(2, "0")}:00`;

  // Use show.data.timezone if available, otherwise default to 'America/New_York'
  // This will not handle daylight saving time correctly, but is sufficient for most cases
  // EDT: "America/New_York",
  // EST: "America/New_York",
  // CDT: "America/Chicago",
  // CST: "America/Chicago",
  // MDT: "America/Denver",
  // MST: "America/Denver",
  // PDT: "America/Los_Angeles",
  // PST: "America/Los_Angeles",
  const tz = show?.data?.timezone || "EDT";
  // Convert to UTC using Intl.DateTimeFormat and Date
  const dateObj = new Date(
    new Date(localDateStr + " " + tz).toLocaleString("en-US", {
      timeZone: "UTC",
    }),
  );

  // Format as ISO string with 'Z'
  return dateObj.toISOString().replace(/\.\d{3}Z$/, "Z");
}

const startDateISO = parseDateTime(show.data.startDate, show.data.startTime);
const endDateISO = show.data.endDate
  ? parseDateTime(show.data.endDate, show.data.endTime)
  : startDateISO;

// Helper to parse address string into parts
function parseAddress(addressStr) {
  // Example: "123 Wallaby Way, Cincinnati, OH 45213"
  if (!addressStr) return {};
  const regex = /^(.+?),\s*([^,]+),\s*([A-Z]{2})\s*(\d{5})?$/;
  const match = addressStr.match(regex);
  if (!match) return {};
  return {
    streetAddress: match[1].trim(),
    addressLocality: match[2].trim(),
    addressRegion: match[3].trim(),
    postalCode: match[4] ? match[4].trim() : "",
    addressCountry: "US",
  };
}

const addressParts = parseAddress(show.data.locationAddress);
---

<script
  type="application/ld+json"
  set:html={JSON.stringify({
    "@context": "https://schema.org",
    "@type": "Event",
    name: show.data.title,
    url: `https://${details[0].data.link_website || "geeyourband.com"}/show/${show.slug}`,
    startDate: startDateISO,
    endDate: endDateISO,
    ...(show.data.location || show.data.locationAddress
      ? {
          location: {
            "@type": "Place",
            ...(show.data.location ? { name: show.data.location } : {}),
            ...(show.data.locationAddress
              ? {
                  address: {
                    "@type": "PostalAddress",
                    streetAddress: addressParts.streetAddress || "",
                    addressLocality: addressParts.addressLocality || "",
                    addressRegion: addressParts.addressRegion || "",
                    postalCode: addressParts.postalCode || "",
                    addressCountry: {
                      "@type": "Country",
                      name: addressParts.addressCountry || "US",
                    },
                  },
                }
              : {}),
          },
        }
      : {}),
    // offers: {
    //   "@type": "Offer",
    //   name: "General Admission",
    //   price: 9.0,
    //   priceCurrency: "USD",
    //   validFrom: validFrom || startDateISO,
    //   url: "",
    //   availability: (availability ? "https://schema.org/InStock" : "https://schema.org/SoldOut"),
    // },
    offers: {
      "@type": "Offer",
      availability: "https://schema.org/InStock",
      url: `https://${details[0].data.link_website || "geeyourband.com"}/show/${show.slug}`,
    },
    image: show.data.image
      ? typeof show.data.image === "object" && show.data.image.src
        ? (() => {
            // Remove query params from image src
            const cleanSrc = show.data.image.src.split("?")[0];
            return `https://${details[0].data.link_website || "geeyourband.com"}${cleanSrc.startsWith("/") ? "" : "/"}${cleanSrc.replace(/^\/+/, "")}`;
          })()
        : typeof show.data.image === "string" &&
            show.data.image.startsWith("http")
          ? show.data.image.split("?")[0]
          : typeof show.data.image === "string"
            ? `https://${details[0].data.link_website || "geeyourband.com"}${show.data.image.split("?")[0].startsWith("/") ? "" : "/"}${show.data.image.split("?")[0].replace(/^\/+/, "")}`
            : `https://${details[0].data.link_website || "geeyourband.com"}/assets/favicons/banner.png`
      : `https://${details[0].data.link_website || "geeyourband.com"}/assets/favicons/banner.png`,
    description:
      show.body && show.body.trim()
        ? show.body
            .split(" ")
            .slice(0, 40)
            .join(" ")
            .replace(/[#*_\`]/g, "")
            .replace(/\[([^\]]+)\]\([^\)]+\)/g, "$1")
            .trim() + (show.body.split(" ").length > 40 ? "..." : "")
        : "",
    performer: [
      {
        "@type": "MusicGroup",
        name: details[0].data.name,
        description: details[0].data.description,
        image: `https://${details[0].data.link_website || "geeyourband.com"}/assets/favicons/banner.png`,
        genre: "Dance",
        url: details[0].data.link_website || "https://geeyourband.com",
        sameAs: [details[0].data.link_facebook, details[0].data.link_instagram],
      },
      ...members.map((member) => ({
        "@type": "Person",
        name: member.data.name,
        ...(member.data.instrument && { jobTitle: member.data.instrument }),
      })),
    ],
    organizer: {
      "@type": "MusicGroup",
      name: details[0].data.name,
      image: `https://${details[0].data.link_website || "geeyourband.com"}/assets/favicons/banner.png`,
      url: `https://${details[0].data.link_website || "geeyourband.com"}`,
      sameAs: [details[0].data.link_facebook, details[0].data.link_instagram],
    },
    eventStatus: "https://schema.org/EventScheduled",
    eventAttendanceMode: "https://schema.org/OfflineEventAttendanceMode",
  })}
/>

<BaseLayout
  title={show.data.title}
  description={show.body && show.body.trim()
    ? show.body
        .split(" ")
        .slice(0, 40)
        .join(" ")
        .replace(/[#*_\`]/g, "")
        .replace(/\[([^\]]+)\]\([^\)]+\)/g, "$1")
        .trim() + (show.body.split(" ").length > 40 ? "..." : "")
    : ""}
>
  <article
    id="show"
    class="flex flex-col gap-8 mx-auto px-6 pt-6 max-[460px]:pt-10 pb-32 max-w-3xl container"
  >
    <section id="show-image" class="relative mx-auto max-w-3xl overflow-hidden">
      {
        show.data.image && (
          <picture>
            {typeof show.data.image === "object" ? (
              <Image
                src={show.data.image}
                alt={show.data.title}
                width={show.data.image.width}
                height={show.data.image.height}
                decoding="async"
                class="w-full h-auto object-cover"
              />
            ) : (
              <img
                src={show.data.image}
                alt={show.data.title}
                width={350}
                height={350}
                decoding="async"
                class="w-full h-auto object-cover"
              />
            )}
          </picture>
        )
      }
    </section>

    <section id="show-info" class="flex flex-col gap-4 mx-auto mt-8 max-w-3xl">
      <section
        id="show-details"
        class="flex flex-col justify-center items-center gap-4 mb-8 text-center"
      >
        <h1 id={show.data.title}>{show.data.title}</h1>
        <div class="flex flex-col items-center gap-4 w-full">
          <div class="flex flex-col items-center gap-0">
            {
              show.data.location && (
                <p class="text-yellow-200 text-lg text-center italic tracking-wide">
                  {show.data.location}
                </p>
              )
            }
            {
              show.data.locationAddress && (
                <p class="text-yellow-200 text-base text-center tracking-wide">
                  <a
                    href={`https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(show.data.locationAddress)}`}
                    title={`View ${show.data.location ? show.data.location : show.data.locationAddress} on Google Maps`}
                    target="_blank"
                    rel="noopener noreferrer"
                    class="group inline-flex items-center gap-1 hover:text-yellow-300 underline transition"
                  >
                    {show.data.locationAddress}
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      class="opacity-80 group-hover:opacity-100 ml-1 w-4 h-4 text-yellow-200 group-hover:text-yellow-300 transition"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                      aria-hidden="true"
                    >
                      <title>Opens in new tab</title>
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M14 3h7m0 0v7m0-7L10 14m-4 0v7a2 2 0 002 2h7a2 2 0 002-2v-7"
                      />
                    </svg>
                  </a>
                </p>
              )
            }
          </div>
          <div class="flex flex-col items-center gap-2">
            <span class="font-medium text-white text-lg">
              {show.data.startDate}{
                show.data.startDate !== show.data.endDate
                  ? " – " + show.data.endDate
                  : ""
              }
            </span>
            <span
              class="bg-pink-700/80 shadow-sm px-3 py-1 rounded-full font-bold text-white text-lg"
            >
              {show.data.startTime} – {show.data.endTime}
              {show.data.timezone ? `(${show.data.timezone})` : "(EDT)"}
            </span>
          </div>
        </div>
      </section>

      {
        members.length !== 0 && (
          <section
            id="members-and-content"
            class="flex flex-col justify-left items-stretch gap-4 mx-auto max-w-3xl"
          >
            <div class="flex flex-col justify-center items-stretch gap-2 mb-6 pb-6 border-yellow-400 border-t border-b text-center">
              <h2 id="the-band" class="pt-4 text-base">
                The Band
              </h2>
              <div class="flex-col justify-left items-stretch gap-6 max-[376px]:gap-2 grid grid-cols-3 max-[550px]:grid-cols-2">
                {members.map((member, index) => (
                  <CardMemberSmall index={index} member={member} />
                ))}
              </div>
            </div>

            <div id="show-content" class="mx-auto max-w-3xl overflow-auto">
              <p set:html={content} />
            </div>
          </section>
        )
      }
    </section>
  </article>
</BaseLayout>
